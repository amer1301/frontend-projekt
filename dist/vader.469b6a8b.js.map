{"mappings":"AACA,IAAI,UAAU;AAGd,wDAAwD;AACxD,eAAe,eAAe,QAAQ;IAClC,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,CAAC,yDAAyD,EAAE,mBAAmB,UAAU,iBAAiB,CAAC;QACxI,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,oCAAoC;QACpC,IAAI,KAAK,MAAM,GAAG,GAAG;YACjB,WAAW,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG;YACjC,YAAY,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG;YAClC,QAAQ,GAAG,CAAC,2BAAwB,UAAU;YAE9C,+CAA+C;YAC/C,MAAM,WAAW,UAAU;QAC/B,OACI,MAAM;IAEd,EAAE,OAAO,OAAO;QACZ,MAAM;IACV;AACJ;AAEA,eAAe,WAAW,QAAQ,EAAE,SAAS;IACzC,IAAI,mBAAmB,CAAC,gDAAgD,EAAE,SAAS,WAAW,EAAE,UAAU,2GAA2G,CAAC;IACtN,IAAI,kBAAkB,CAAC,gDAAgD,EAAE,SAAS,WAAW,EAAE,UAAU,0KAA0K,CAAC;IAEpR,IAAI;QACA,gDAAgD;QAChD,MAAM,CAAC,gBAAgB,cAAc,GAAG,MAAM,QAAQ,GAAG,CAAC;YACtD,MAAM;YACN,MAAM;SACT;QAED,2CAA2C;QAC3C,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,EAAE,EAAE;YACzC,MAAM,kBAAkB,MAAM,eAAe,IAAI;YACjD,MAAM,iBAAiB,MAAM,cAAc,IAAI;YAC/C,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,eAAe,MAAM,CAAC,CAAC,EAAE,eAAe,UAAU,CAAC,QAAQ,EAAE,gBAAgB,aAAa,EAAE,cAAc,MAAM,CAAC,CAAC,EAAE,cAAc,UAAU,CAAC,QAAQ,EAAE,gBAAgB;QACxM;QAEA,uBAAuB;QACvB,MAAM,aAAa,MAAM,eAAe,IAAI;QAC5C,MAAM,YAAY,MAAM,cAAc,IAAI;QAE1C,QAAQ,GAAG,CAAC,wBAAwB;QACpC,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,2BAA2B;QAC3B;QAEA,gEAAgE;QAChE,qBAAqB;QACrB,oBAAoB;IAExB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wCAAkC;IACpD;AACJ;AAEA,SAAS,cAAc,CAAC,cAAc,gBAAgB,CAAC,SAAS;IAC5D,MAAM,WAAW,SAAS,cAAc,CAAC,kBAAkB,KAAK;IAChE,IAAI,UACA,eAAe,WAAY,6CAA6C;SAExE,MAAM;AAEd;AAEA,SAAS;IACL,2CAA2C;IAC3C,SAAS,cAAc,CAAC,eAAe,SAAS,GAAG;IACnD,SAAS,cAAc,CAAC,cAAc,SAAS,GAAG;AACtD;AAEA,SAAS,qBAAqB,IAAI;IAC9B,MAAM,kBAAkB,SAAS,cAAc,CAAC;IAChD,MAAM,QAAQ,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;IACpC,MAAM,eAAe,KAAK,MAAM,CAAC,cAAc,IAAI,EAAE;IACrD,MAAM,iBAAiB,KAAK,MAAM,CAAC,aAAa,IAAI,EAAE;IACtD,MAAM,aAAa,KAAK,MAAM,CAAC,oBAAoB,IAAI,EAAE;IACzD,MAAM,aAAa,KAAK,MAAM,CAAC,cAAc,IAAI,EAAE;IACnD,MAAM,YAAY,KAAK,MAAM,CAAC,QAAQ,IAAI,EAAE;IAE5C,sBAAsB;IACtB,MAAM,cAAc,IAAI;IACxB,MAAM,cAAc,YAAY,QAAQ;IAExC,0CAA0C;IAC1C,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAC;QAChC,MAAM,WAAW,IAAI,KAAK,MAAM,QAAQ;QACxC,OAAO,YAAY;IACvB;IAEA,uDAAuD;IACvD,MAAM,uBAAuB,aAAa,MAAM,CAAC,CAAC,GAAG,QAAU,KAAK,CAAC,MAAM,IAAI,YAAY,WAAW;IACtG,MAAM,yBAAyB,eAAe,MAAM,CAAC,CAAC,GAAG,QAAU,KAAK,CAAC,MAAM,IAAI,YAAY,WAAW;IAC1G,MAAM,qBAAqB,WAAW,MAAM,CAAC,CAAC,GAAG,QAAU,KAAK,CAAC,MAAM,IAAI,YAAY,WAAW;IAClG,MAAM,qBAAqB,WAAW,MAAM,CAAC,CAAC,GAAG,QAAU,KAAK,CAAC,MAAM,IAAI,YAAY,WAAW;IAClG,MAAM,oBAAoB,UAAU,MAAM,CAAC,CAAC,GAAG,QAAU,KAAK,CAAC,MAAM,IAAI,YAAY,WAAW;IAEhG,IAAI,cAAc,MAAM,GAAG,KAAK,qBAAqB,MAAM,GAAG,GAC1D,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,MAAM,EAAE,IAAK;QAC3C,MAAM,OAAO,aAAa,CAAC,EAAE;QAC7B,MAAM,cAAc,oBAAoB,CAAC,EAAE;QAC3C,MAAM,SAAS,sBAAsB,CAAC,EAAE;QACxC,MAAM,WAAW,kBAAkB,CAAC,EAAE;QACtC,MAAM,YAAY,kBAAkB,CAAC,EAAE;QACvC,MAAM,WAAW,iBAAiB,CAAC,EAAE;QAErC,MAAM,gBAAgB,SAAS,aAAa,CAAC;QAC7C,cAAc,SAAS,CAAC,GAAG,CAAC;QAC5B,cAAc,SAAS,GAAG,CAAC;yBACd,EAAE,KAAK;+BACD,EAAE,YAAY;AAAO,yBAC3B,EAAE,OAAO;kCACA,EAAE,SAAS;yBACpB,EAAE,UAAU;AAAS,+BAClB,EAAE,SAAS;YAC3B,CAAC;QACD,gBAAgB,WAAW,CAAC;IAChC;SAEA,gBAAgB,SAAS,GAAG;AAEpC;AAEA,SAAS,oBAAoB,IAAI;IAC7B,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,MAAM,OAAO,KAAK,KAAK,CAAC,IAAI,IAAI,EAAE;IAClC,MAAM,kBAAkB,KAAK,KAAK,CAAC,kBAAkB,IAAI,EAAE;IAC3D,MAAM,kBAAkB,KAAK,KAAK,CAAC,kBAAkB,IAAI,EAAE;IAC3D,MAAM,iBAAiB,KAAK,KAAK,CAAC,iBAAiB,IAAI,EAAE;IACzD,MAAM,YAAY,KAAK,KAAK,CAAC,YAAY,IAAI,EAAE;IAC/C,MAAM,gBAAgB,KAAK,KAAK,CAAC,wBAAwB,IAAI,EAAE;IAC/D,MAAM,gBAAgB,KAAK,KAAK,CAAC,wBAAwB,IAAI,EAAE;IAC/D,MAAM,gBAAgB,KAAK,KAAK,CAAC,kBAAkB,IAAI,EAAE;IAEzD,IAAI,KAAK,MAAM,GAAG,KAAK,gBAAgB,MAAM,GAAG,GAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;QAClC,MAAM,MAAM,IAAI,CAAC,EAAE;QACnB,MAAM,UAAU,eAAe,CAAC,EAAE;QAClC,MAAM,UAAU,eAAe,CAAC,EAAE;QAClC,MAAM,SAAS,cAAc,CAAC,EAAE;QAChC,MAAM,WAAW,SAAS,CAAC,EAAE;QAC7B,MAAM,cAAc,aAAa,CAAC,EAAE;QACpC,MAAM,cAAc,aAAa,CAAC,EAAE;QACpC,MAAM,eAAe,aAAa,CAAC,EAAE;QAErC,MAAM,eAAe,SAAS,aAAa,CAAC;QAC5C,aAAa,SAAS,CAAC,GAAG,CAAC;QAC3B,aAAa,SAAS,GAAG,CAAC;yBACb,EAAE,IAAI;mCACI,EAAE,QAAQ;AAAO,mCACjB,EAAE,QAAQ;AAAO,yBAC3B,EAAE,OAAO;AAAQ,+BACd,EAAE,SAAS;sCACD,EAAE,YAAY;sCACd,EAAE,YAAY;6BACvB,EAAE,aAAa;YAChC,CAAC;QACD,eAAe,WAAW,CAAC;IAC/B;SAEA,eAAe,SAAS,GAAG;AAEnC","sources":["OneDrive/Skrivbord/frontend-projekt/vader.js"],"sourcesContent":["\r\nlet latitude, longitude;\r\n\r\n\r\n// Hämtar koordinater från Nominatim API (OpenStreetMap)\r\nasync function getCoordinates(location) { \r\n    try { \r\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&addressdetails=1`); \r\n        const data = await response.json(); \r\n\r\n        // Logga koordinater om de hittades \r\n        if (data.length > 0) { \r\n            latitude = parseFloat(data[0].lat); \r\n            longitude = parseFloat(data[0].lon); \r\n            console.log('Hämtade koordinater:', latitude, longitude); \r\n\r\n            // När koordinater är hämtade, hämta väderdata \r\n            await getWeather(latitude, longitude); \r\n        } else { \r\n            alert('Platsen kunde inte hittas!'); \r\n        } \r\n    } catch (error) { \r\n        alert('Något gick fel när platsen skulle sökas.'); \r\n    } \r\n} \r\n\r\nasync function getWeather(latitude, longitude) {\r\n    let weatherUrlHourly = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,snowfall,precipitation,relative_humidity_2m,wind_speed_10m&timezone=Europe/Stockholm`;\r\n    let weatherUrlDaily = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,snowfall_sum,relative_humidity_2m_max,relative_humidity_2m_min,wind_speed_10m_max&timezone=Europe/Stockholm`;\r\n\r\n    try {\r\n        // Hämta både timvis och daglig väderinformation\r\n        const [responseHourly, responseDaily] = await Promise.all([\r\n            fetch(weatherUrlHourly),\r\n            fetch(weatherUrlDaily)\r\n        ]);\r\n\r\n        // Kontrollera om svaret är OK (status 200)\r\n        if (!responseHourly.ok || !responseDaily.ok) {\r\n            const errorTextHourly = await responseHourly.text();\r\n            const errorTextDaily = await responseDaily.text();\r\n            throw new Error(`API-svar: ${responseHourly.status} ${responseHourly.statusText}. Svar: ${errorTextHourly} \\nAPI-svar: ${responseDaily.status} ${responseDaily.statusText}. Svar: ${errorTextDaily}`);\r\n        }\r\n\r\n        // Läsa svaret som JSON\r\n        const dataHourly = await responseHourly.json();\r\n        const dataDaily = await responseDaily.json();\r\n\r\n        console.log('Weather data hourly:', dataHourly);\r\n        console.log('Weather data daily:', dataDaily);\r\n\r\n        // Rensa tidigare väderdata\r\n        clearWeatherData();\r\n\r\n        // Visa den data vi hämtar beroende på typ (timme eller 7 dagar)\r\n        displayHourlyWeather(dataHourly);\r\n        displayDailyWeather(dataDaily);\r\n\r\n    } catch (error) {\r\n        console.error('Fel vid hämtning av väderdata:', error);\r\n    }\r\n}\r\n\r\ndocument.getElementById('search-btn').addEventListener('click', function() {\r\n    const location = document.getElementById('location-input').value;\r\n    if (location) {\r\n        getCoordinates(location);  // Hämtar koordinater för den angivna platsen\r\n    } else {\r\n        alert('Vänligen ange en plats!');\r\n    }\r\n});\r\n\r\nfunction clearWeatherData() {\r\n    // Töm väderinformation från både sektioner\r\n    document.getElementById('hourly-info').innerHTML = '';\r\n    document.getElementById('daily-info').innerHTML = '';\r\n}\r\n\r\nfunction displayHourlyWeather(data) {\r\n    const hourlyContainer = document.getElementById('hourly-info');\r\n    const times = data.hourly.time || [];\r\n    const temperatures = data.hourly.temperature_2m || [];\r\n    const precipitations = data.hourly.precipitation || [];\r\n    const humidities = data.hourly.relative_humidity_2m || [];\r\n    const windSpeeds = data.hourly.wind_speed_10m || [];\r\n    const snowfalls = data.hourly.snowfall || [];\r\n\r\n    // Hämta nuvarande tid\r\n    const currentTime = new Date();\r\n    const currentHour = currentTime.getHours();\r\n    \r\n    // Filtrera bort timmar som redan passerat\r\n    const filteredTimes = times.filter((time) => {\r\n        const timeHour = new Date(time).getHours();\r\n        return timeHour >= currentHour;\r\n    });\r\n\r\n    // Hämta de väderdata som matchar de filtrerade tiderna\r\n    const filteredTemperatures = temperatures.filter((_, index) => times[index] >= currentTime.toISOString());\r\n    const filteredPrecipitations = precipitations.filter((_, index) => times[index] >= currentTime.toISOString());\r\n    const filteredHumidities = humidities.filter((_, index) => times[index] >= currentTime.toISOString());\r\n    const filteredWindSpeeds = windSpeeds.filter((_, index) => times[index] >= currentTime.toISOString());\r\n    const filteredSnowfalls = snowfalls.filter((_, index) => times[index] >= currentTime.toISOString());\r\n\r\n    if (filteredTimes.length > 0 && filteredTemperatures.length > 0) {\r\n        for (let i = 0; i < filteredTimes.length; i++) {\r\n            const time = filteredTimes[i];\r\n            const temperature = filteredTemperatures[i];\r\n            const precip = filteredPrecipitations[i];\r\n            const humidity = filteredHumidities[i];\r\n            const windSpeed = filteredWindSpeeds[i];\r\n            const snowfall = filteredSnowfalls[i];\r\n\r\n            const hourlyWeather = document.createElement('div');\r\n            hourlyWeather.classList.add('weather-hour');\r\n            hourlyWeather.innerHTML = `\r\n                <h4>Tid: ${time}</h4>\r\n                <p>Temperatur: ${temperature}°C</p>\r\n                <p>Regn: ${precip} mm</p>\r\n                <p>Luftfuktighet: ${humidity}%</p>\r\n                <p>Vind: ${windSpeed} m/s</p>\r\n                <p>Snöfall: ${snowfall} cm</p>\r\n            `;\r\n            hourlyContainer.appendChild(hourlyWeather);\r\n        }\r\n    } else {\r\n        hourlyContainer.innerHTML = '<p>Ingen väderdata tillgänglig för framtida timmar.</p>';\r\n    }\r\n}\r\n\r\nfunction displayDailyWeather(data) {\r\n    const dailyContainer = document.getElementById('daily-info');\r\n    const days = data.daily.time || [];\r\n    const maxTemperatures = data.daily.temperature_2m_max || [];\r\n    const minTemperatures = data.daily.temperature_2m_min || [];\r\n    const precipitations = data.daily.precipitation_sum || [];\r\n    const snowfalls = data.daily.snowfall_sum || [];\r\n    const maxHumidities = data.daily.relative_humidity_2m_max || [];\r\n    const minHumidities = data.daily.relative_humidity_2m_min || [];\r\n    const maxWindSpeeds = data.daily.wind_speed_10m_max || [];\r\n\r\n    if (days.length > 0 && maxTemperatures.length > 0) {\r\n        for (let i = 0; i < days.length; i++) {\r\n            const day = days[i];\r\n            const maxTemp = maxTemperatures[i];\r\n            const minTemp = minTemperatures[i];\r\n            const precip = precipitations[i];\r\n            const snowfall = snowfalls[i];\r\n            const maxHumidity = maxHumidities[i];\r\n            const minHumidity = minHumidities[i];\r\n            const maxWindSpeed = maxWindSpeeds[i];\r\n\r\n            const dailyWeather = document.createElement('div');\r\n            dailyWeather.classList.add('weather-day');\r\n            dailyWeather.innerHTML = `\r\n                <h4>Dag: ${day}</h4>\r\n                <p>Max temperatur: ${maxTemp}°C</p>\r\n                <p>Min temperatur: ${minTemp}°C</p>\r\n                <p>Regn: ${precip} mm</p>\r\n                <p>Snöfall: ${snowfall} cm</p>\r\n                <p>Max luftfuktighet: ${maxHumidity}%</p>\r\n                <p>Min luftfuktighet: ${minHumidity}%</p>\r\n                <p>Max vind: ${maxWindSpeed} km/h</p>\r\n            `;\r\n            dailyContainer.appendChild(dailyWeather);\r\n        }\r\n    } else {\r\n        dailyContainer.innerHTML = '<p>Ingen 7-dagars väderdata tillgänglig.</p>';\r\n    }\r\n}\r\n\r\n"],"names":[],"version":3,"file":"vader.469b6a8b.js.map","sourceRoot":"/__parcel_source_root/"}